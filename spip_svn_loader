#!/bin/bash

function ouinon()
{
    local ouinon
    ouinon=
    ouinonREPONSE=
    while [ -z "$ouinonREPONSE" ]; do
        read -p "$1 [$2]:" ouinon
        if [ -z "$ouinon" ]; then
            ouinon=$2
        fi
        ouinon=$(echo "$ouinon" | tr [:upper:] [:lower:])
        for i in $(printf "oui\nnon"); do
            [[ $i = $ouinon ]] && ouinonREPONSE=$ouinon
        done
    done
}

function choixStabilite()
{
    local stabilite
    stabiliteREPONSE=
    echo "Choisir parmi dev, maintenance ou release"
    while [ -z "$stabiliteREPONSE" ]; do
        read -p "Quel niveau de stabilite souhaitez-vous ? [$1]:" stabilite
        if [ -z "$stabilite" ]; then
            stabilite=$1
        fi
        stabilite=$(echo "$stabilite" | tr [:upper:] [:lower:])
        for i in $(printf "dev\nmaintenance\nrelease"); do
            [[ $i = $stabilite ]] && stabiliteREPONSE=$stabilite
        done
    done
}

function meilleurChoix()
{
    local meilleurChoix=0
    local _reference
    for reference in $referencesLISTE;do
        _reference=$(echo $reference | grep -Eio "[0-9]+\.[0-9]+(\.[0-9]+)?$")
        if [ "$_reference" != "" ];then
            majeur=$(echo $_reference | sed 's/^\([[:digit:]]*\)\..*/\1/')
            _reference=$(echo $_reference | sed 's/^[[:digit:]]*\.\(.*\)/\1/')
            mineur=$(echo $_reference | sed 's/^\([[:digit:]]*\)\..*/\1/')
            _reference=$(echo $_reference | sed 's/^[[:digit:]]*\.\(.*\)/\1/')
            if [ -z $_reference ];then
                _reference=0
            fi
            indice=$(expr \( $_reference + \( $mineur \* 100 \) \) + \( $majeur \* 10000 \))
            if [ $indice -gt $meilleurChoix ]; then
                meilleurChoix=$indice
                meilleureREPONSE=$reference
            fi
        fi
    done
}

function choixBranche()
{
    local default
    local branche
    brancheREPONSE=
    default=$1
    shift
    while [ -z "$brancheREPONSE" ]; do
        read -p "Choisis ta version, mon amiE [$default]:" branche
        if [ -z "$branche" ]; then
            branche=$default
        fi
        branche=$(echo "$branche" | tr [:upper:] [:lower:])
        for i in $choixLISTE; do
            [[ $i = $branche ]] && brancheREPONSE=$branche
        done
    done
    selectionBranche $brancheREPONSE $referencesLISTE
}

function selectionBranche()
{
    local position=$1
    shift $position
    brancheREPONSE=$1
}

function selectionMeilleure()
{
    local meilleure=$1
    shift
    local index=0
    for selection in $@; do
        index=$(expr $index + 1)
        [[ "$meilleure" = "$selection" ]] && meilleureREPONSE=$index
    done
}

function construitListe()
{
    choixLISTE=$(printf "$choixLISTE\n$1")
    referencesLISTE=$(printf "$referencesLISTE\n$2")
}

function listeBranche()
{
    local RED='\033[0;31m'
    local YELLOW='\033[1;33m'
    local NC='\033[0m' # No Color

    local branche=$1
    local toutes=$2
    if [ "$toutes" != "toutes" ]; then
        toutes=
    fi

    local _UTILES=`grep -e $branche ${SVN_SPIP_REFERENCES} | sed 's/.*\(spip-.*\)/\1/'`
    local _LISTE=`svn ls ${SVN_SPIP_ROOT}$branche | sed 's/\/$//'`
    local _UTILE
    local index=1

    choixLISTE=
    referencesLISTE=

    for release in $_LISTE; do
        _UTILE=$(printf "%s\n" "${_UTILES}" | grep -e "^${release}$")
        if [ -n "$toutes" ]; then
            printf ${YELLOW}$index${NC}") "
            if [ ! -z $_UTILE ]; then
                printf ${RED}$release"\n"${NC}
            else
                printf $release"\n"
            fi
            construitListe $index $release
            index=`expr $index + 1`
        else
            if [ ! -z $_UTILE ]; then
                construitListe $index $release
                printf ${YELLOW}$index${NC}") "$release"\n"
                index=`expr $index + 1`
            fi
        fi
    done
    meilleurChoix
}

#Traitement des paramètres
#tout afficher ?
SVN_SPIP_TOUT_AFFICHER=0
if [ "$1" = "tout" ]
then
    SVN_SPIP_TOUT_AFFICHER=1
fi

#Vérifier que svn est installé ou dans le PATH
svn --version --quiet >/dev/null 2>&1
if [ $? -ne 0 ]
then
    echo "SVN n'est pas installé ou pas dans le PATH."
    exit 1
fi

SVN_SPIP_ROOT=svn://trac.rezo.net/spip
SVN_SPIP_TRUNK=/spip
SVN_SPIP_BRANCHES=/branches
SVN_SPIP_TAGS=/tags
SVN_SPIP_REFERENCES=$HOME"/.spip/svn_loader_references.txt"
SVN_SPIP_REMOTE_REFERENCES=http://james.at.rezo.net/svn_spip/svn_spip.txt

#Vérifier que curl est dans le PATH
curl --version >/dev/null 2>&1
if [ $? -ne 0 ]
then
    echo "cURL n'est pas installé ou pas dans le PATH"
    exit 1
fi

#Vérifier la présence du fichier des références
SVN_SPIP_REMOTE_REFERENCES_DOWNLOAD=0
if [ -f ${SVN_SPIP_REFERENCES} ]
then
    echo "Le fichier des références est présent."
    #Vérifier la fraicheur du fichier des références
    _REMOTE=`curl -I -s ${SVN_SPIP_REMOTE_REFERENCES} | grep -e '^Last-Modified: ' | sed 's/^Last-Modified: \(.*\) GMT.*/\1/'`
    _DARWIN=$(echo $OSTYPE | grep -i darwin)
    if [ -n "$_DARWIN" ]
    then
        _LOCALE=`stat -f %m ${SVN_SPIP_REFERENCES}`
        _REMOTE=`LANG=en_US.UTF8 && date -j -f "%a, %d %b %Y %T" "${_REMOTE}" "+%s"`
    else
        _LOCALE=`stat -c %Y ${SVN_SPIP_REFERENCES}`
        _REMOTE=`LANG=en_US.UTF8 && date -d "${_REMOTE}" "+%s"`
    fi
    if [ "$_REMOTE" -gt "$_LOCALE" ]
    then
        echo "Mais il n'est plus à jour."
        SVN_SPIP_REMOTE_REFERENCES_DOWNLOAD=1
    fi
else
    echo "Fichier des références absent."
    SVN_SPIP_REMOTE_REFERENCES_DOWNLOAD=1
fi

#Mettre à jour le fichier des références
if [ $SVN_SPIP_REMOTE_REFERENCES_DOWNLOAD -eq 1 ]
then
    echo "Téléchargement en cours..."
    if [ ! -d ${HOME}/.spip ]
    then
        mkdir -p ${HOME}/.spip
    fi
    curl -s -o ${SVN_SPIP_REFERENCES} ${SVN_SPIP_REMOTE_REFERENCES} >/dev/null
fi

#Vérifier que PHP est installé et a une version acceptable
php -v >/dev/null 2>&1
if [ $? -ne 0 ]
then
    echo "PHP n'est pas installé ou pas dans le PATH"
    exit 1
else
    _version=`php -r "echo PHP_VERSION_ID;"`
    if [ $_version -lt 50300 ]
    then
        echo "Ca va être chaud avec une version aussi vielle de PHP ! Je préfère m'arrêter là..."
        exit 1
    fi
fi

SVN_SPIP_CHECKOUT=-1
SVN_SPIP_UPDATE=0
SVN_SPIP_SWITCH=0

#Tester si le répertoire courant est un SPIP sous SVN
svn info --show-item=repos-root-url 2>/dev/null | grep -e "^${SVN_SPIP_ROOT}$" >/dev/null
if [ $? -eq 1 ]
then
    echo "Ce répertoire n'est pas une Working Copy de SPIP."
    SVN_SPIP_UPDATE=-1
    SVN_SPIP_SWITCH=-1
    SVN_SPIP_CHECKOUT=1
else
    #Récupérer la branche de SPIP utilisée
    SVN_SPIP_UPDATE=0
    SVN_SPIP_SWITCH=0
    SVN_SPIP_BRANCHE_LOCALE=`svn info --show-item=relative-url`
    _UTILE=`grep -e "^${SVN_SPIP_BRANCHE_LOCALE}$" ${SVN_SPIP_REFERENCES}`
    if [ ! -z $_UTILE ]
    then
        echo "Ce répertoire est une Working Copy de SPIP associée à une branche utile."
        SVN_SPIP_UPDATE=1
    else
        echo "Ce répertoire est une Working Copy de SPIP associée à une branche non maintenue."
        SVN_SPIP_SWITCH=1
        #Vérifier si la branche locale existe toujours
        svn ls >/dev/null 2>&1
        if [ $? -eq 1 ]
        then
            echo "Et cette branche n'existe plus !"
            SVN_SPIP_UPDATE=-1
        fi
    fi
    echo "D'après le code, la version de SPIP est :"$(grep "spip_version_branche =" ecrire/inc_version.php | sed "s/.*\"\(.*\)\".*/\1/")
    echo "D'après SVN, la branche est :"$SVN_SPIP_BRANCHE_LOCALE
fi

#Installation ?
if [ $SVN_SPIP_CHECKOUT -ge 0 ]
then
    echo "Pour y remédier:"
    choixStabilite "release"
    if [ "$stabiliteREPONSE" = "dev" ]
    then
        _BRANCHE=$SVN_SPIP_TRUNK
    elif [[ "$stabiliteREPONSE" = "maintenance" ]]
    then
        printf "\nLes branches de maintenance:\n"
        listeBranche $SVN_SPIP_BRANCHES $( [[ $SVN_SPIP_TOUT_AFFICHER -eq 1 ]] && echo "toutes")
        selectionMeilleure $meilleureREPONSE $referencesLISTE
        choixBranche $meilleureREPONSE
        _BRANCHE=$SVN_SPIP_BRANCHES"/"$brancheREPONSE
    else
        printf "\nLes releases:\n"
        listeBranche $SVN_SPIP_TAGS $( [[ $SVN_SPIP_TOUT_AFFICHER -eq 1 ]] && echo "toutes")
        selectionMeilleure $meilleureREPONSE $referencesLISTE
        choixBranche $meilleureREPONSE
        _BRANCHE=$SVN_SPIP_TAGS"/"$brancheREPONSE
    fi

    WC=`find . -type d -maxdepth 1 -name .svn -exec echo {} \;`
    if [ -z "$WC" ]; then
        #Warning si non vide
        VIDE=`ls -1a | grep -v -e "^\.$" | grep -v -e "^\.\.$" | wc -l`
        if [ $VIDE -gt 0 ]
        then
            echo "ATTENTION! Ce répertoire n'est pas vide !"
        fi
        rep=.
        _chemin=`pwd`
    else
        echo "Ce répertoire est sous SVN. SPIP va être installé dans un sous-répertoire."
        for d in spip$(md5 -q -s `pwd`"spip") spip; do
            if [ ! -d $d ];then
                rep=$d
                _chemin=`pwd`"/$rep"
            fi
        done
    fi

    ouinon "Installer SPIP dans $_chemin ?"
    if [ "$ouinonREPONSE" = "oui" ]
    then
        checkout="checkout"
        if [ "$stabiliteREPONSE" = "release" ]
        then
            echo "Pour installer une release, il est recommandé de détacher le répertoire de SVN."
            ouinon "Souhaitez-vous détacher cette installation de SVN ?" "oui"
            if [ "$ouinonREPONSE" = "oui" ]
            then
                checkout="export"
                if [ "$rep" = "." ]
                then
                    checkout=$(echo $checkout" --force")
                fi
            fi
        fi
        svn $checkout ${SVN_SPIP_ROOT}${_BRANCHE} $rep
        exit 0
    fi

    echo "Installation annulée."
    exit 1
fi

#Bascule vers une autre branche ?
if [ $SVN_SPIP_SWITCH -ge 0 ]
then
    if [ $SVN_SPIP_SWITCH -eq 0 ]
    then
        _DEFAULT=non
    else
        _DEFAULT=oui
    fi
    ouinon "Voulez-vous basculer vers une autre branche ?" "$_DEFAULT"
    if [ "$ouinonREPONSE" = "oui" ]
    then
        #TODO exclure la branche avec laquelle le répertoire est déjà asoscié
        choixStabilite "release"
        if [ "$stabiliteREPONSE" = "dev" ]
        then
            _BRANCHE=$SVN_SPIP_TRUNK
        elif [[ "$stabiliteREPONSE" = "maintenance" ]]
        then
            printf "\nLes branches de maintenance:\n"
            listeBranche $SVN_SPIP_BRANCHES $( [[ $SVN_SPIP_TOUT_AFFICHER -eq 1 ]] && echo "toutes")
            selectionMeilleure $meilleureREPONSE $referencesLISTE
            choixBranche $meilleureREPONSE
            _BRANCHE=$SVN_SPIP_BRANCHES"/"$brancheREPONSE
        else
            printf "\nLes releases:\n"
            listeBranche $SVN_SPIP_TAGS $( [[ $SVN_SPIP_TOUT_AFFICHER -eq 1 ]] && echo "toutes")
            selectionMeilleure $meilleureREPONSE $referencesLISTE
            choixBranche $meilleureREPONSE
            _BRANCHE=$SVN_SPIP_TAGS"/"$brancheREPONSE
        fi

        echo "Bascule vers "$_BRANCHE"... (ça peut être long, patientez un peu)"
        svn switch ^${_BRANCHE}
        exit 0
    fi
fi

#Mise à jour ?
if [ $SVN_SPIP_UPDATE -ge 0 ]
then
    if [ $SVN_SPIP_UPDATE -eq 0 ]
    then
        _DEFAULT=non
    else
        _DEFAULT=oui
    fi
    ouinon "Voulez-vous faire une mise à jour ?" "$_DEFAULT"
    if [ "$ouinonREPONSE" = "oui" ]
    then
        svn up
    fi
fi

exit 0
